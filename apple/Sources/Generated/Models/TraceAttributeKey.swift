//
// TraceAttributeKey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public enum TraceAttributeKey: String, Codable, CaseIterable {
    case edgePeriodNames = "edge.names"
    case edgePeriodLength = "edge.length"
    case edgePeriodSpeed = "edge.speed"
    case edgePeriodRoadClass = "edge.road_class"
    case edgePeriodBeginHeading = "edge.begin_heading"
    case edgePeriodEndHeading = "edge.end_heading"
    case edgePeriodBeginShapeIndex = "edge.begin_shape_index"
    case edgePeriodEndShapeIndex = "edge.end_shape_index"
    case edgePeriodTraversability = "edge.traversability"
    case edgePeriodUse = "edge.use"
    case edgePeriodToll = "edge.toll"
    case edgePeriodUnpaved = "edge.unpaved"
    case edgePeriodTunnel = "edge.tunnel"
    case edgePeriodBridge = "edge.bridge"
    case edgePeriodRoundabout = "edge.roundabout"
    case edgePeriodInternalIntersection = "edge.internal_intersection"
    case edgePeriodDriveOnRight = "edge.drive_on_right"
    case edgePeriodSurface = "edge.surface"
    case edgePeriodSignPeriodExitNumber = "edge.sign.exit_number"
    case edgePeriodSignPeriodExitBranch = "edge.sign.exit_branch"
    case edgePeriodSignPeriodExitToward = "edge.sign.exit_toward"
    case edgePeriodSignPeriodExitName = "edge.sign.exit_name"
    case edgePeriodTravelMode = "edge.travel_mode"
    case edgePeriodVehicleType = "edge.vehicle_type"
    case edgePeriodPedestrianType = "edge.pedestrian_type"
    case edgePeriodBicycleType = "edge.bicycle_type"
    case edgePeriodTransitType = "edge.transit_type"
    case edgePeriodId = "edge.id"
    case edgePeriodWayId = "edge.way_id"
    case edgePeriodWeightedGrade = "edge.weighted_grade"
    case edgePeriodMaxUpwardGrade = "edge.max_upward_grade"
    case edgePeriodMaxDownwardGrade = "edge.max_downward_grade"
    case edgePeriodMeanElevation = "edge.mean_elevation"
    case edgePeriodLaneCount = "edge.lane_count"
    case edgePeriodCycleLane = "edge.cycle_lane"
    case edgePeriodBicycleNetwork = "edge.bicycle_network"
    case edgePeriodSacScale = "edge.sac_scale"
    case edgePeriodSidewalk = "edge.sidewalk"
    case edgePeriodDensity = "edge.density"
    case edgePeriodSpeedLimit = "edge.speed_limit"
    case edgePeriodTruckSpeed = "edge.truck_speed"
    case edgePeriodTruckRoute = "edge.truck_route"
    case nodePeriodIntersectingEdgePeriodBeginHeading = "node.intersecting_edge.begin_heading"
    case nodePeriodIntersectingEdgePeriodFromEdgeNameConsistency = "node.intersecting_edge.from_edge_name_consistency"
    case nodePeriodIntersectingEdgePeriodToEdgeNameConsistency = "node.intersecting_edge.to_edge_name_consistency"
    case nodePeriodIntersectingEdgePeriodDriveability = "node.intersecting_edge.driveability"
    case nodePeriodIntersectingEdgePeriodCyclability = "node.intersecting_edge.cyclability"
    case nodePeriodIntersectingEdgePeriodWalkability = "node.intersecting_edge.walkability"
    case nodePeriodIntersectingEdgePeriodUse = "node.intersecting_edge.use"
    case nodePeriodIntersectingEdgePeriodRoadClass = "node.intersecting_edge.road_class"
    case nodePeriodElapsedTime = "node.elapsed_time"
    case nodePeriodAdminIndex = "node.admin_index"
    case nodePeriodType = "node.type"
    case nodePeriodFork = "node.fork"
    case nodePeriodTimeZone = "node.time_zone"
    case osmChangeset = "osm_changeset"
    case shape
    case adminPeriodCountryCode = "admin.country_code"
    case adminPeriodCountryText = "admin.country_text"
    case adminPeriodStateCode = "admin.state_code"
    case adminPeriodStateText = "admin.state_text"
    case matchedPeriodPoint = "matched.point"
    case matchedPeriodType = "matched.type"
    case matchedPeriodEdgeIndex = "matched.edge_index"
    case matchedPeriodBeginRouteDiscontinuity = "matched.begin_route_discontinuity"
    case matchedPeriodEndRouteDiscontinuity = "matched.end_route_discontinuity"
    case matchedPeriodDistanceAlongEdge = "matched.distance_along_edge"
    case matchedPeriodDistanceFromTracePoint = "matched.distance_from_trace_point"
}
