//
// RoutingWaypointAllOfSearchFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct RoutingWaypointAllOfSearchFilter: Codable, JSONEncodable, Hashable {
    /** Excludes roads marked as tunnels */
    public var excludeTunnel: Bool? = false
    /** Excludes roads marked as bridges */
    public var excludeBridge: Bool? = false
    /** Excludes roads marked as ramps */
    public var excludeRamp: Bool? = false
    /** Excludes roads marked as closed */
    public var excludeClosures: Bool? = true
    /** The lowest road class allowed */
    public var minRoadClass: RoadClass?
    /** The highest road class allowed */
    public var maxRoadClass: RoadClass?

    public init(excludeTunnel: Bool? = false, excludeBridge: Bool? = false, excludeRamp: Bool? = false, excludeClosures: Bool? = true, minRoadClass: RoadClass? = nil, maxRoadClass: RoadClass? = nil) {
        self.excludeTunnel = excludeTunnel
        self.excludeBridge = excludeBridge
        self.excludeRamp = excludeRamp
        self.excludeClosures = excludeClosures
        self.minRoadClass = minRoadClass
        self.maxRoadClass = maxRoadClass
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case excludeTunnel = "exclude_tunnel"
        case excludeBridge = "exclude_bridge"
        case excludeRamp = "exclude_ramp"
        case excludeClosures = "exclude_closures"
        case minRoadClass = "min_road_class"
        case maxRoadClass = "max_road_class"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(excludeTunnel, forKey: .excludeTunnel)
        try container.encodeIfPresent(excludeBridge, forKey: .excludeBridge)
        try container.encodeIfPresent(excludeRamp, forKey: .excludeRamp)
        try container.encodeIfPresent(excludeClosures, forKey: .excludeClosures)
        try container.encodeIfPresent(minRoadClass, forKey: .minRoadClass)
        try container.encodeIfPresent(maxRoadClass, forKey: .maxRoadClass)
    }
}
