//
// CostingOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct CostingOptions: Codable, JSONEncodable, Hashable {
    public var auto: AutoCostingOptions?
    public var bus: AutoCostingOptions?
    public var taxi: AutoCostingOptions?
    public var truck: TruckCostingOptions?
    public var bicycle: BicycleCostingOptions?
    public var motorScooter: MotorScooterCostingOptions?
    public var motorcycle: MotorcycleCostingOptions?
    public var pedestrian: PedestrianCostingOptions?

    public init(auto: AutoCostingOptions? = nil, bus: AutoCostingOptions? = nil, taxi: AutoCostingOptions? = nil, truck: TruckCostingOptions? = nil, bicycle: BicycleCostingOptions? = nil, motorScooter: MotorScooterCostingOptions? = nil, motorcycle: MotorcycleCostingOptions? = nil, pedestrian: PedestrianCostingOptions? = nil) {
        self.auto = auto
        self.bus = bus
        self.taxi = taxi
        self.truck = truck
        self.bicycle = bicycle
        self.motorScooter = motorScooter
        self.motorcycle = motorcycle
        self.pedestrian = pedestrian
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case auto
        case bus
        case taxi
        case truck
        case bicycle
        case motorScooter = "motor_scooter"
        case motorcycle
        case pedestrian
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(auto, forKey: .auto)
        try container.encodeIfPresent(bus, forKey: .bus)
        try container.encodeIfPresent(taxi, forKey: .taxi)
        try container.encodeIfPresent(truck, forKey: .truck)
        try container.encodeIfPresent(bicycle, forKey: .bicycle)
        try container.encodeIfPresent(motorScooter, forKey: .motorScooter)
        try container.encodeIfPresent(motorcycle, forKey: .motorcycle)
        try container.encodeIfPresent(pedestrian, forKey: .pedestrian)
    }
}
