//
// Contour.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct Contour: Codable, JSONEncodable, Hashable {
    /** The time in minutes for the contour. Mutually exclusive of distance. */
    public var time: Double?
    /** The distance in km for the contour. Mutually exclusive of time. */
    public var distance: Double?
    /** The color for the output contour, specified as a hex value (without a leading `#`). If no color is specified, one will be assigned automatically. */
    public var color: String?

    public init(time: Double? = nil, distance: Double? = nil, color: String? = nil) {
        self.time = time
        self.distance = distance
        self.color = color
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case time
        case distance
        case color
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(distance, forKey: .distance)
        try container.encodeIfPresent(color, forKey: .color)
    }
}
