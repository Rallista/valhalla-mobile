//
// IsochroneProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct IsochroneProperties: Codable, JSONEncodable, Hashable {
    public enum Metric: String, Codable, CaseIterable {
        case time
        case distance
    }

    public var fillColor: String?
    public var opacity: Float?
    public var fill: String?
    public var fillOpacity: Float?
    public var color: String?
    public var contour: Float?
    public var metric: Metric?

    public init(fillColor: String? = nil, opacity: Float? = nil, fill: String? = nil, fillOpacity: Float? = nil, color: String? = nil, contour: Float? = nil, metric: Metric? = nil) {
        self.fillColor = fillColor
        self.opacity = opacity
        self.fill = fill
        self.fillOpacity = fillOpacity
        self.color = color
        self.contour = contour
        self.metric = metric
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fillColor
        case opacity
        case fill
        case fillOpacity
        case color
        case contour
        case metric
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fillColor, forKey: .fillColor)
        try container.encodeIfPresent(opacity, forKey: .opacity)
        try container.encodeIfPresent(fill, forKey: .fill)
        try container.encodeIfPresent(fillOpacity, forKey: .fillOpacity)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encodeIfPresent(contour, forKey: .contour)
        try container.encodeIfPresent(metric, forKey: .metric)
    }
}
