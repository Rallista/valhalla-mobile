//
// ManeuverSign.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct ManeuverSign: Codable, JSONEncodable, Hashable {
    /** A list of exit number elements. This is typically just a single value. */
    public var exitNumberElements: [ManeuverSignElement]?
    /** A list of exit branch elements. The text is a subsequent road name or route number after the sign. */
    public var exitBranchElements: [ManeuverSignElement]?
    /** A list of exit name elements. The text is the interchange identifier (used more frequently outside the US). */
    public var exitTowardElements: [ManeuverSignElement]?
    /** A list of exit name elements. The text is the location where the road ahead goes (typically a city, but occasionally a road name or route number). */
    public var exitNameElements: [ManeuverSignElement]?

    public init(exitNumberElements: [ManeuverSignElement]? = nil, exitBranchElements: [ManeuverSignElement]? = nil, exitTowardElements: [ManeuverSignElement]? = nil, exitNameElements: [ManeuverSignElement]? = nil) {
        self.exitNumberElements = exitNumberElements
        self.exitBranchElements = exitBranchElements
        self.exitTowardElements = exitTowardElements
        self.exitNameElements = exitNameElements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case exitNumberElements = "exit_number_elements"
        case exitBranchElements = "exit_branch_elements"
        case exitTowardElements = "exit_toward_elements"
        case exitNameElements = "exit_name_elements"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(exitNumberElements, forKey: .exitNumberElements)
        try container.encodeIfPresent(exitBranchElements, forKey: .exitBranchElements)
        try container.encodeIfPresent(exitTowardElements, forKey: .exitTowardElements)
        try container.encodeIfPresent(exitNameElements, forKey: .exitNameElements)
    }
}
