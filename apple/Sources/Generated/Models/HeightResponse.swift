//
// HeightResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct HeightResponse: Codable, JSONEncodable, Hashable {
    /** An identifier to disambiguate requests (echoed by the server). */
    public var id: String?
    public var shape: [Coordinate]?
    /** The input polyline. */
    public var encodedPolyline: String?
    /** The list of heights for each point, in meters. Present only if `range` is `false`. Null values indicate missing data. */
    public var height: [Int]?
    /** The list of ranges and heights for each point in the shape, where each entry is an array of length 2. Present only if `range` is `true`. In each pair, the first element represents the range or distance along the input locations. It is the cumulative distance along the previous coordinates in the shape up to the current coordinate. This value for the first coordinate in the shape will always be 0. The second element in the pair represents the height or elevation at the associated coordinate. The height is null if no height data exists for a given location. Both values are expressed in meters. */
    public var rangeHeight: [[Int]]?

    public init(id: String? = nil, shape: [Coordinate]? = nil, encodedPolyline: String? = nil, height: [Int]? = nil, rangeHeight: [[Int]]? = nil) {
        self.id = id
        self.shape = shape
        self.encodedPolyline = encodedPolyline
        self.height = height
        self.rangeHeight = rangeHeight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case shape
        case encodedPolyline = "encoded_polyline"
        case height
        case rangeHeight = "range_height"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(shape, forKey: .shape)
        try container.encodeIfPresent(encodedPolyline, forKey: .encodedPolyline)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(rangeHeight, forKey: .rangeHeight)
    }
}
