/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package Models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param `internal` Is the edge internal to an intersection?
 * @param link Is the edge a ramp or turn channel?
 * @param surface A representation of the smoothness of the highway. This is used for costing and access checks based on the vehicle type.
 * @param use 
 * @param classification The classification/importance of the road/path. Used for a variety of purposes including fallback speed estimation and access for certain vehicle types.
 */


data class HighwayClassification (

    /* Is the edge internal to an intersection? */
    @Json(name = "internal")
    val `internal`: kotlin.Boolean? = null,

    /* Is the edge a ramp or turn channel? */
    @Json(name = "link")
    val link: kotlin.Boolean? = null,

    /* A representation of the smoothness of the highway. This is used for costing and access checks based on the vehicle type. */
    @Json(name = "surface")
    val surface: HighwayClassification.Surface? = null,

    @Json(name = "use")
    val use: HighwayClassification.Use? = null,

    /* The classification/importance of the road/path. Used for a variety of purposes including fallback speed estimation and access for certain vehicle types. */
    @Json(name = "classification")
    val classification: HighwayClassification.Classification? = null

) {

    /**
     * A representation of the smoothness of the highway. This is used for costing and access checks based on the vehicle type.
     *
     * Values: pavedSmooth,paved,pavedRough,compacted,dirt,gravel,path,impassable
     */
    @JsonClass(generateAdapter = false)
    enum class Surface(val value: kotlin.String) {
        @Json(name = "paved_smooth") pavedSmooth("paved_smooth"),
        @Json(name = "paved") paved("paved"),
        @Json(name = "paved_rough") pavedRough("paved_rough"),
        @Json(name = "compacted") compacted("compacted"),
        @Json(name = "dirt") dirt("dirt"),
        @Json(name = "gravel") gravel("gravel"),
        @Json(name = "path") path("path"),
        @Json(name = "impassable") impassable("impassable");
    }
    /**
     * 
     *
     * Values: road,ramp,turnChannel,track,driveway,alley,parkingAisle,emergencyAccess,driveThrough,culdesac,livingStreet,serviceRoad,cycleway,mountainBike,sidewalk,footway,elevator,steps,escalator,path,pedestrian,bridleway,pedestrianCrossing,restArea,serviceArea,other,rail,ferry,railMinusFerry,bus,egressConnection,platformConnnection,transitConnection,construction
     */
    @JsonClass(generateAdapter = false)
    enum class Use(val value: kotlin.String) {
        @Json(name = "road") road("road"),
        @Json(name = "ramp") ramp("ramp"),
        @Json(name = "turn_channel") turnChannel("turn_channel"),
        @Json(name = "track") track("track"),
        @Json(name = "driveway") driveway("driveway"),
        @Json(name = "alley") alley("alley"),
        @Json(name = "parking_aisle") parkingAisle("parking_aisle"),
        @Json(name = "emergency_access") emergencyAccess("emergency_access"),
        @Json(name = "drive_through") driveThrough("drive_through"),
        @Json(name = "culdesac") culdesac("culdesac"),
        @Json(name = "living_street") livingStreet("living_street"),
        @Json(name = "service_road") serviceRoad("service_road"),
        @Json(name = "cycleway") cycleway("cycleway"),
        @Json(name = "mountain_bike") mountainBike("mountain_bike"),
        @Json(name = "sidewalk") sidewalk("sidewalk"),
        @Json(name = "footway") footway("footway"),
        @Json(name = "elevator") elevator("elevator"),
        @Json(name = "steps") steps("steps"),
        @Json(name = "escalator") escalator("escalator"),
        @Json(name = "path") path("path"),
        @Json(name = "pedestrian") pedestrian("pedestrian"),
        @Json(name = "bridleway") bridleway("bridleway"),
        @Json(name = "pedestrian_crossing") pedestrianCrossing("pedestrian_crossing"),
        @Json(name = "rest_area") restArea("rest_area"),
        @Json(name = "service_area") serviceArea("service_area"),
        @Json(name = "other") other("other"),
        @Json(name = "rail") rail("rail"),
        @Json(name = "ferry") ferry("ferry"),
        @Json(name = "rail-ferry") railMinusFerry("rail-ferry"),
        @Json(name = "bus") bus("bus"),
        @Json(name = "egress_connection") egressConnection("egress_connection"),
        @Json(name = "platform_connnection") platformConnnection("platform_connnection"),
        @Json(name = "transit_connection") transitConnection("transit_connection"),
        @Json(name = "construction") construction("construction");
    }
    /**
     * The classification/importance of the road/path. Used for a variety of purposes including fallback speed estimation and access for certain vehicle types.
     *
     * Values: motorway,trunk,primary,secondary,tertiary,unclassified,residential,serviceOther
     */
    @JsonClass(generateAdapter = false)
    enum class Classification(val value: kotlin.String) {
        @Json(name = "motorway") motorway("motorway"),
        @Json(name = "trunk") trunk("trunk"),
        @Json(name = "primary") primary("primary"),
        @Json(name = "secondary") secondary("secondary"),
        @Json(name = "tertiary") tertiary("tertiary"),
        @Json(name = "unclassified") unclassified("unclassified"),
        @Json(name = "residential") residential("residential"),
        @Json(name = "service_other") serviceOther("service_other");
    }
}

