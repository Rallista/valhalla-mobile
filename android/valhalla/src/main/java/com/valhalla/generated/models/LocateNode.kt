/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package Models

import Models.Access
import Models.Administrative
import Models.NodeId
import Models.NodeType

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param lat The latitude of a point in the shape.
 * @param lon The longitude of a point in the shape.
 * @param trafficSignal 
 * @param type 
 * @param nodeId 
 * @param access 
 * @param edgeCount 
 * @param administrative 
 * @param intersectionType 
 * @param density 
 * @param localEdgeCount 
 * @param modeChange 
 */


data class LocateNode (

    /* The latitude of a point in the shape. */
    @Json(name = "lat")
    val lat: kotlin.Double,

    /* The longitude of a point in the shape. */
    @Json(name = "lon")
    val lon: kotlin.Double,

    @Json(name = "traffic_signal")
    val trafficSignal: kotlin.Boolean? = null,

    @Json(name = "type")
    val type: NodeType? = null,

    @Json(name = "node_id")
    val nodeId: NodeId? = null,

    @Json(name = "access")
    val access: Access? = null,

    @Json(name = "edge_count")
    val edgeCount: kotlin.Int? = null,

    @Json(name = "administrative")
    val administrative: Administrative? = null,

    @Json(name = "intersection_type")
    val intersectionType: LocateNode.IntersectionType? = null,

    @Json(name = "density")
    val density: kotlin.Int? = null,

    @Json(name = "local_edge_count")
    val localEdgeCount: kotlin.Int? = null,

    @Json(name = "mode_change")
    val modeChange: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: regular,`false`,deadMinusEnd,fork
     */
    @JsonClass(generateAdapter = false)
    enum class IntersectionType(val value: kotlin.String) {
        @Json(name = "regular") regular("regular"),
        @Json(name = "false") `false`("false"),
        @Json(name = "dead-end") deadMinusEnd("dead-end"),
        @Json(name = "fork") fork("fork");
    }
}

