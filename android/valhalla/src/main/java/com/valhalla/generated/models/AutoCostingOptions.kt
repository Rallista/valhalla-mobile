/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package Models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param maneuverPenalty A penalty (in seconds) applied when transitioning between roads (determined by name).
 * @param gateCost The estimated cost (in seconds) when a gate is encountered.
 * @param gatePenalty A penalty (in seconds) applied to the route cost when a gate is encountered. This penalty can be used to reduce the likelihood of suggesting a route with gates unless absolutely necessary.
 * @param countryCrossingCost The estimated cost (in seconds) when encountering an international border.
 * @param countryCrossingPenalty A penalty applied to transitions to international border crossings. This penalty can be used to reduce the likelihood of suggesting a route with border crossings unless absolutely necessary.
 * @param servicePenalty A penalty applied to transitions to service roads. This penalty can be used to reduce the likelihood of suggesting a route with service roads unless absolutely necessary. The default penalty is 15 for cars, busses, motor scooters, and motorcycles; and zero for others.
 * @param serviceFactor A factor that multiplies the cost when service roads are encountered. The default is 1.2 for cars and busses, and 1 for trucks, motor scooters, and motorcycles.
 * @param useLivingStreets A measure of willingness to take living streets. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without living streets, 0 does not guarantee avoidance of them. The default value is 0 for trucks; 0.1 for other motor vehicles; 0.5 for bicycles; and 0.6 for pedestrians.
 * @param useFerry A measure of willingness to take ferries. Values near 0 attempt to avoid ferries, and values near 1 will favour them. Note that as some routes may be impossible without ferries, 0 does not guarantee avoidance of them.
 * @param height The height of the automobile (in meters).
 * @param width The width of the automobile (in meters).
 * @param tollBoothCost The estimated cost (in seconds) when a toll booth is encountered.
 * @param tollBoothPenalty A penalty (in seconds) applied to the route cost when a toll booth is encountered. This penalty can be used to reduce the likelihood of suggesting a route with toll booths unless absolutely necessary.
 * @param ferryCost The estimated cost (in seconds) when a ferry is encountered.
 * @param useHighways A measure of willingness to take highways. Values near 0 attempt to avoid highways, and values near 1 will favour them. Note that as some routes may be impossible without highways, 0 does not guarantee avoidance of them.
 * @param useTolls A measure of willingness to take toll roads. Values near 0 attempt to avoid tolls, and values near 1 will favour them. Note that as some routes may be impossible without tolls, 0 does not guarantee avoidance of them.
 * @param useTracks A measure of willingness to take track roads. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without track roads, 0 does not guarantee avoidance of them. The default value is 0 for automobiles, busses, and trucks; and 0.5 for all other costing modes.
 * @param topSpeed The top speed (in kph) that the vehicle is capable of travelling.
 * @param shortest If true changes the cost metric to be quasi-shortest (pure distance-based) costing. This will disable ALL other costing factors.
 * @param ignoreClosures If true, ignores all known closures. This option cannot be set if `location.search_filter.exclude_closures` is also specified.
 * @param includeHov2 If true, indicates the desire to include HOV roads with a 2-occupant requirement in the route when advantageous.
 * @param includeHov3 If true, indicates the desire to include HOV roads with a 3-occupant requirement in the route when advantageous.
 * @param includeHot If true, indicates the desire to include toll roads which require the driver to pay a toll if the occupant requirement isn't met
 */


data class AutoCostingOptions (

    /* A penalty (in seconds) applied when transitioning between roads (determined by name). */
    @Json(name = "maneuver_penalty")
    val maneuverPenalty: kotlin.Int? = 5,

    /* The estimated cost (in seconds) when a gate is encountered. */
    @Json(name = "gate_cost")
    val gateCost: kotlin.Int? = 15,

    /* A penalty (in seconds) applied to the route cost when a gate is encountered. This penalty can be used to reduce the likelihood of suggesting a route with gates unless absolutely necessary. */
    @Json(name = "gate_penalty")
    val gatePenalty: kotlin.Int? = 300,

    /* The estimated cost (in seconds) when encountering an international border. */
    @Json(name = "country_crossing_cost")
    val countryCrossingCost: kotlin.Int? = 600,

    /* A penalty applied to transitions to international border crossings. This penalty can be used to reduce the likelihood of suggesting a route with border crossings unless absolutely necessary. */
    @Json(name = "country_crossing_penalty")
    val countryCrossingPenalty: kotlin.Int? = 0,

    /* A penalty applied to transitions to service roads. This penalty can be used to reduce the likelihood of suggesting a route with service roads unless absolutely necessary. The default penalty is 15 for cars, busses, motor scooters, and motorcycles; and zero for others. */
    @Json(name = "service_penalty")
    val servicePenalty: kotlin.Int? = null,

    /* A factor that multiplies the cost when service roads are encountered. The default is 1.2 for cars and busses, and 1 for trucks, motor scooters, and motorcycles. */
    @Json(name = "service_factor")
    val serviceFactor: kotlin.Double? = 1.0,

    /* A measure of willingness to take living streets. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without living streets, 0 does not guarantee avoidance of them. The default value is 0 for trucks; 0.1 for other motor vehicles; 0.5 for bicycles; and 0.6 for pedestrians. */
    @Json(name = "use_living_streets")
    val useLivingStreets: kotlin.Double? = null,

    /* A measure of willingness to take ferries. Values near 0 attempt to avoid ferries, and values near 1 will favour them. Note that as some routes may be impossible without ferries, 0 does not guarantee avoidance of them. */
    @Json(name = "use_ferry")
    val useFerry: kotlin.Double? = 0.5,

    /* The height of the automobile (in meters). */
    @Json(name = "height")
    val height: kotlin.Double? = 1.9,

    /* The width of the automobile (in meters). */
    @Json(name = "width")
    val width: kotlin.Double? = 1.6,

    /* The estimated cost (in seconds) when a toll booth is encountered. */
    @Json(name = "toll_booth_cost")
    val tollBoothCost: kotlin.Int? = 15,

    /* A penalty (in seconds) applied to the route cost when a toll booth is encountered. This penalty can be used to reduce the likelihood of suggesting a route with toll booths unless absolutely necessary. */
    @Json(name = "toll_booth_penalty")
    val tollBoothPenalty: kotlin.Int? = 0,

    /* The estimated cost (in seconds) when a ferry is encountered. */
    @Json(name = "ferry_cost")
    val ferryCost: kotlin.Int? = 300,

    /* A measure of willingness to take highways. Values near 0 attempt to avoid highways, and values near 1 will favour them. Note that as some routes may be impossible without highways, 0 does not guarantee avoidance of them. */
    @Json(name = "use_highways")
    val useHighways: kotlin.Double? = 0.5,

    /* A measure of willingness to take toll roads. Values near 0 attempt to avoid tolls, and values near 1 will favour them. Note that as some routes may be impossible without tolls, 0 does not guarantee avoidance of them. */
    @Json(name = "use_tolls")
    val useTolls: kotlin.Double? = 0.5,

    /* A measure of willingness to take track roads. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without track roads, 0 does not guarantee avoidance of them. The default value is 0 for automobiles, busses, and trucks; and 0.5 for all other costing modes. */
    @Json(name = "use_tracks")
    val useTracks: kotlin.Double? = null,

    /* The top speed (in kph) that the vehicle is capable of travelling. */
    @Json(name = "top_speed")
    val topSpeed: kotlin.Int? = 140,

    /* If true changes the cost metric to be quasi-shortest (pure distance-based) costing. This will disable ALL other costing factors. */
    @Json(name = "shortest")
    val shortest: kotlin.Boolean? = false,

    /* If true, ignores all known closures. This option cannot be set if `location.search_filter.exclude_closures` is also specified. */
    @Json(name = "ignore_closures")
    val ignoreClosures: kotlin.Boolean? = false,

    /* If true, indicates the desire to include HOV roads with a 2-occupant requirement in the route when advantageous. */
    @Json(name = "include_hov2")
    val includeHov2: kotlin.Boolean? = false,

    /* If true, indicates the desire to include HOV roads with a 3-occupant requirement in the route when advantageous. */
    @Json(name = "include_hov3")
    val includeHov3: kotlin.Boolean? = false,

    /* If true, indicates the desire to include toll roads which require the driver to pay a toll if the occupant requirement isn't met */
    @Json(name = "include_hot")
    val includeHot: kotlin.Boolean? = false

)

