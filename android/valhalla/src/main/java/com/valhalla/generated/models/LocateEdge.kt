/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package Models

import Models.LocateDetailedEdge
import Models.LocateEdgeInfo
import Models.NodeId

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param edgeId 
 * @param correlatedLat 
 * @param correlatedLon 
 * @param percentAlong 
 * @param sideOfStreet 
 * @param linearReference A base64-encoded [OpenLR location reference](https://www.openlr-association.com/fileadmin/user_upload/openlr-whitepaper_v1.5.pdf), for a graph edge of the road network matched by the query.
 * @param outboundReach 
 * @param heading 
 * @param inboundReach 
 * @param distance 
 * @param predictedSpeeds Predicted speed information based on historical data. If available, this will include 2016 entries. Each entry represents 5 minutes, where the first entry represents midnight on Monday, the second entry represents 00:05 on Monday, etc.
 * @param edgeInfo 
 * @param edge 
 * @param warnings 
 */


data class LocateEdge (

    @Json(name = "edge_id")
    val edgeId: NodeId? = null,

    @Json(name = "correlated_lat")
    val correlatedLat: kotlin.Double? = null,

    @Json(name = "correlated_lon")
    val correlatedLon: kotlin.Double? = null,

    @Json(name = "percent_along")
    val percentAlong: kotlin.Double? = null,

    @Json(name = "side_of_street")
    val sideOfStreet: LocateEdge.SideOfStreet? = null,

    /* A base64-encoded [OpenLR location reference](https://www.openlr-association.com/fileadmin/user_upload/openlr-whitepaper_v1.5.pdf), for a graph edge of the road network matched by the query. */
    @Json(name = "linear_reference")
    val linearReference: kotlin.String? = null,

    @Json(name = "outbound_reach")
    val outboundReach: kotlin.Int? = null,

    @Json(name = "heading")
    val heading: kotlin.Float? = null,

    @Json(name = "inbound_reach")
    val inboundReach: kotlin.Int? = null,

    @Json(name = "distance")
    val distance: kotlin.Float? = null,

    /* Predicted speed information based on historical data. If available, this will include 2016 entries. Each entry represents 5 minutes, where the first entry represents midnight on Monday, the second entry represents 00:05 on Monday, etc. */
    @Json(name = "predicted_speeds")
    val predictedSpeeds: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "edge_info")
    val edgeInfo: LocateEdgeInfo? = null,

    @Json(name = "edge")
    val edge: LocateDetailedEdge? = null,

    @Json(name = "warnings")
    val warnings: kotlin.collections.List<kotlin.String>? = null

) {

    /**
     * 
     *
     * Values: left,right,neither
     */
    @JsonClass(generateAdapter = false)
    enum class SideOfStreet(val value: kotlin.String) {
        @Json(name = "left") left("left"),
        @Json(name = "right") right("right"),
        @Json(name = "neither") neither("neither");
    }
}

