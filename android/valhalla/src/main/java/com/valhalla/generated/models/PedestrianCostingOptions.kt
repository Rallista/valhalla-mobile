/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package Models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param walkingSpeed Walking speed in kph.
 * @param walkwayFactor A factor that multiplies the cost when walkways are encountered.
 * @param sidewalkFactor A factor that multiplies the cost when sidewalks are encountered.
 * @param alleyFactor A factor that multiplies the cost when alleys are encountered.
 * @param drivewayFactor A factor that multiplies the cost when driveways are encountered.
 * @param stepPenalty A penalty (in seconds) added to each transition onto a path with steps or stairs.
 * @param useFerry A measure of willingness to take ferries. Values near 0 attempt to avoid ferries, and values near 1 will favour them. Note that as some routes may be impossible without ferries, 0 does not guarantee avoidance of them.
 * @param useLivingStreets A measure of willingness to take living streets. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without living streets, 0 does not guarantee avoidance of them. The default value is 0 for trucks; 0.1 for other motor vehicles; 0.5 for bicycles; and 0.6 for pedestrians.
 * @param useTracks A measure of willingness to take track roads. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without track roads, 0 does not guarantee avoidance of them. The default value is 0 for automobiles, busses, and trucks; and 0.5 for all other costing modes.
 * @param useHills A measure of willingness to take tackle hills. Values near 0 attempt to avoid hills and steeper grades even if it means a longer route, and values near 1 indicates that the user does not fear them. Note that as some routes may be impossible without hills, 0 does not guarantee avoidance of them.
 * @param useLit A measure of preference for streets that are lit. 0 indicates indifference toward lit streets, and 1 indicates that unlit streets should be avoided. Note that even with values near 1, there is no guarantee that the returned route will include lit segments.
 * @param servicePenalty A penalty applied to transitions to service roads. This penalty can be used to reduce the likelihood of suggesting a route with service roads unless absolutely necessary. The default penalty is 15 for cars, busses, motor scooters, and motorcycles; and zero for others.
 * @param serviceFactor A factor that multiplies the cost when service roads are encountered. The default is 1.2 for cars and busses, and 1 for trucks, motor scooters, and motorcycles.
 * @param maxHikingDifficulty The maximum difficulty of hiking trails allowed. This corresponds to the OSM `sac_scale`.
 * @param bssRentCost The estimated cost (in seconds) to rent a bicycle from a sharing station in `bikeshare` mode.
 * @param bssRentPenalty A penalty (in seconds) to rent a bicycle in `bikeshare` mode.
 */


data class PedestrianCostingOptions (

    /* Walking speed in kph. */
    @Json(name = "walking_speed")
    val walkingSpeed: kotlin.Int? = null,

    /* A factor that multiplies the cost when walkways are encountered. */
    @Json(name = "walkway_factor")
    val walkwayFactor: kotlin.Double? = 1.0,

    /* A factor that multiplies the cost when sidewalks are encountered. */
    @Json(name = "sidewalk_factor")
    val sidewalkFactor: kotlin.Double? = 1.0,

    /* A factor that multiplies the cost when alleys are encountered. */
    @Json(name = "alley_factor")
    val alleyFactor: kotlin.Double? = 2.0,

    /* A factor that multiplies the cost when driveways are encountered. */
    @Json(name = "driveway_factor")
    val drivewayFactor: kotlin.Double? = 5.0,

    /* A penalty (in seconds) added to each transition onto a path with steps or stairs. */
    @Json(name = "step_penalty")
    val stepPenalty: kotlin.Int? = 30,

    /* A measure of willingness to take ferries. Values near 0 attempt to avoid ferries, and values near 1 will favour them. Note that as some routes may be impossible without ferries, 0 does not guarantee avoidance of them. */
    @Json(name = "use_ferry")
    val useFerry: kotlin.Double? = 0.5,

    /* A measure of willingness to take living streets. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without living streets, 0 does not guarantee avoidance of them. The default value is 0 for trucks; 0.1 for other motor vehicles; 0.5 for bicycles; and 0.6 for pedestrians. */
    @Json(name = "use_living_streets")
    val useLivingStreets: kotlin.Double? = null,

    /* A measure of willingness to take track roads. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without track roads, 0 does not guarantee avoidance of them. The default value is 0 for automobiles, busses, and trucks; and 0.5 for all other costing modes. */
    @Json(name = "use_tracks")
    val useTracks: kotlin.Double? = null,

    /* A measure of willingness to take tackle hills. Values near 0 attempt to avoid hills and steeper grades even if it means a longer route, and values near 1 indicates that the user does not fear them. Note that as some routes may be impossible without hills, 0 does not guarantee avoidance of them. */
    @Json(name = "use_hills")
    val useHills: kotlin.Double? = 0.5,

    /* A measure of preference for streets that are lit. 0 indicates indifference toward lit streets, and 1 indicates that unlit streets should be avoided. Note that even with values near 1, there is no guarantee that the returned route will include lit segments. */
    @Json(name = "use_lit")
    val useLit: kotlin.Double? = 0.0,

    /* A penalty applied to transitions to service roads. This penalty can be used to reduce the likelihood of suggesting a route with service roads unless absolutely necessary. The default penalty is 15 for cars, busses, motor scooters, and motorcycles; and zero for others. */
    @Json(name = "service_penalty")
    val servicePenalty: kotlin.Int? = null,

    /* A factor that multiplies the cost when service roads are encountered. The default is 1.2 for cars and busses, and 1 for trucks, motor scooters, and motorcycles. */
    @Json(name = "service_factor")
    val serviceFactor: kotlin.Double? = 1.0,

    /* The maximum difficulty of hiking trails allowed. This corresponds to the OSM `sac_scale`. */
    @Json(name = "max_hiking_difficulty")
    val maxHikingDifficulty: kotlin.Int? = 1,

    /* The estimated cost (in seconds) to rent a bicycle from a sharing station in `bikeshare` mode. */
    @Json(name = "bss_rent_cost")
    val bssRentCost: kotlin.Int? = 120,

    /* A penalty (in seconds) to rent a bicycle in `bikeshare` mode. */
    @Json(name = "bss_rent_penalty")
    val bssRentPenalty: kotlin.Int? = 0

)

