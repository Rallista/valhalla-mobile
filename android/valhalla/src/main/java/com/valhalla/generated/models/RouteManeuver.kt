/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package Models

import Models.ManeuverSign
import Models.TravelMode

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param type The type of route maneuver.  | Code | Type                                | |------|-------------------------------------| | 0    | None                                | | 1    | Start                               | | 2    | Start right                         | | 3    | Start left                          | | 4    | Destination                         | | 5    | Destination right                   | | 6    | Destination left                    | | 7    | Becomes                             | | 8    | Continue                            | | 9    | Slight right                        | | 10   | Right                               | | 11   | Sharp right                         | | 12   | U-turn right                        | | 13   | U-turn left                         | | 14   | Sharp left                          | | 15   | Left                                | | 16   | Slight left                         | | 17   | Ramp straight                       | | 18   | Ramp right                          | | 19   | Ramp left                           | | 20   | Exit right                          | | 21   | Exit left                           | | 22   | Stay straight                       | | 23   | Stay right                          | | 24   | Stay left                           | | 25   | Merge                               | | 26   | Enter roundabout                    | | 27   | Exit roundabout                     | | 28   | Enter ferry                         | | 29   | Exit ferry                          | | 30   | Transit                             | | 31   | Transit transfer                    | | 32   | Transit remain on                   | | 33   | Transit connection start            | | 34   | Transit connection transfer         | | 35   | Transit connection destination      | | 36   | Post-transit connection destination | | 37   | Merge right                         | | 38   | Merge left                          | 
 * @param instruction The written maneuver instruction.
 * @param time The estimated time to complete the entire maneuver, in seconds.
 * @param length The length of the maneuver, in `units`.
 * @param beginShapeIndex The index into the list of shape points for the start of the maneuver.
 * @param endShapeIndex The index into the list of shape points for the end of the maneuver.
 * @param travelMode 
 * @param travelType The type of travel over the maneuver. This can be thought of as a specialization of the travel mode. For example, vehicular travel may be via car, motorcycle, etc.; and travel via bicycle may be via a road bike, mountain bike, etc.
 * @param verbalTransitionAlertInstruction Text suitable for use as a verbal navigation alert.
 * @param verbalPreTransitionInstruction Text suitable for use as a verbal navigation alert immediately prior to the maneuver transition.
 * @param verbalPostTransitionInstruction Text suitable for use as a verbal navigation alert immediately after to the maneuver transition.
 * @param streetNames A list of street names that are consistent along the entire maneuver.
 * @param beginStreetNames A list of street names at the beginning of the maneuver, if they are different from the names at the end.
 * @param toll True any portion of the maneuver is subject to a toll.
 * @param rough True any portion of the maneuver is unpaved or has portions of rough pavement.
 * @param gate True if a gate is encountered in the course of this maneuver.
 * @param ferry True if a ferry is encountered in the course of this maneuver.
 * @param sign 
 * @param roundaboutExitCount The exit number of the roundabout to take after entering.
 * @param departInstruction The written departure time instruction (typically used in a transit maneuver).
 * @param verbalDepartInstruction Text suitable for use as a verbal departure time instruction (typically used in a transit maneuver).
 * @param arriveInstruction The written arrival time instruction (typically used in a transit maneuver).
 * @param verbalArriveInstruction Text suitable for use as a verbal departure time instruction (typically used in a transit maneuver).
 * @param transitInfo Public transit info (not currently supported).
 * @param verbalMultiCue True if the `verbal_pre_transition_instruction` has been appended with the verbal instruction of the next maneuver.
 * @param bssManeuverType Describes a bike share action when using bikeshare routing.
 */


data class RouteManeuver (

    /* The type of route maneuver.  | Code | Type                                | |------|-------------------------------------| | 0    | None                                | | 1    | Start                               | | 2    | Start right                         | | 3    | Start left                          | | 4    | Destination                         | | 5    | Destination right                   | | 6    | Destination left                    | | 7    | Becomes                             | | 8    | Continue                            | | 9    | Slight right                        | | 10   | Right                               | | 11   | Sharp right                         | | 12   | U-turn right                        | | 13   | U-turn left                         | | 14   | Sharp left                          | | 15   | Left                                | | 16   | Slight left                         | | 17   | Ramp straight                       | | 18   | Ramp right                          | | 19   | Ramp left                           | | 20   | Exit right                          | | 21   | Exit left                           | | 22   | Stay straight                       | | 23   | Stay right                          | | 24   | Stay left                           | | 25   | Merge                               | | 26   | Enter roundabout                    | | 27   | Exit roundabout                     | | 28   | Enter ferry                         | | 29   | Exit ferry                          | | 30   | Transit                             | | 31   | Transit transfer                    | | 32   | Transit remain on                   | | 33   | Transit connection start            | | 34   | Transit connection transfer         | | 35   | Transit connection destination      | | 36   | Post-transit connection destination | | 37   | Merge right                         | | 38   | Merge left                          |  */
    @Json(name = "type")
    val type: kotlin.Int,

    /* The written maneuver instruction. */
    @Json(name = "instruction")
    val instruction: kotlin.String,

    /* The estimated time to complete the entire maneuver, in seconds. */
    @Json(name = "time")
    val time: kotlin.Double,

    /* The length of the maneuver, in `units`. */
    @Json(name = "length")
    val length: kotlin.Double,

    /* The index into the list of shape points for the start of the maneuver. */
    @Json(name = "begin_shape_index")
    val beginShapeIndex: kotlin.Int,

    /* The index into the list of shape points for the end of the maneuver. */
    @Json(name = "end_shape_index")
    val endShapeIndex: kotlin.Int,

    @Json(name = "travel_mode")
    val travelMode: TravelMode,

    /* The type of travel over the maneuver. This can be thought of as a specialization of the travel mode. For example, vehicular travel may be via car, motorcycle, etc.; and travel via bicycle may be via a road bike, mountain bike, etc. */
    @Json(name = "travel_type")
    val travelType: RouteManeuver.TravelType,

    /* Text suitable for use as a verbal navigation alert. */
    @Json(name = "verbal_transition_alert_instruction")
    val verbalTransitionAlertInstruction: kotlin.String? = null,

    /* Text suitable for use as a verbal navigation alert immediately prior to the maneuver transition. */
    @Json(name = "verbal_pre_transition_instruction")
    val verbalPreTransitionInstruction: kotlin.String? = null,

    /* Text suitable for use as a verbal navigation alert immediately after to the maneuver transition. */
    @Json(name = "verbal_post_transition_instruction")
    val verbalPostTransitionInstruction: kotlin.String? = null,

    /* A list of street names that are consistent along the entire maneuver. */
    @Json(name = "street_names")
    val streetNames: kotlin.collections.List<kotlin.String>? = null,

    /* A list of street names at the beginning of the maneuver, if they are different from the names at the end. */
    @Json(name = "begin_street_names")
    val beginStreetNames: kotlin.collections.List<kotlin.String>? = null,

    /* True any portion of the maneuver is subject to a toll. */
    @Json(name = "toll")
    val toll: kotlin.Boolean? = false,

    /* True any portion of the maneuver is unpaved or has portions of rough pavement. */
    @Json(name = "rough")
    val rough: kotlin.Boolean? = false,

    /* True if a gate is encountered in the course of this maneuver. */
    @Json(name = "gate")
    val gate: kotlin.Boolean? = false,

    /* True if a ferry is encountered in the course of this maneuver. */
    @Json(name = "ferry")
    val ferry: kotlin.Boolean? = false,

    @Json(name = "sign")
    val sign: ManeuverSign? = null,

    /* The exit number of the roundabout to take after entering. */
    @Json(name = "roundabout_exit_count")
    val roundaboutExitCount: kotlin.Int? = null,

    /* The written departure time instruction (typically used in a transit maneuver). */
    @Json(name = "depart_instruction")
    val departInstruction: kotlin.Int? = null,

    /* Text suitable for use as a verbal departure time instruction (typically used in a transit maneuver). */
    @Json(name = "verbal_depart_instruction")
    val verbalDepartInstruction: kotlin.Int? = null,

    /* The written arrival time instruction (typically used in a transit maneuver). */
    @Json(name = "arrive_instruction")
    val arriveInstruction: kotlin.Int? = null,

    /* Text suitable for use as a verbal departure time instruction (typically used in a transit maneuver). */
    @Json(name = "verbal_arrive_instruction")
    val verbalArriveInstruction: kotlin.Int? = null,

    /* Public transit info (not currently supported). */
    @Json(name = "transit_info")
    val transitInfo: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    /* True if the `verbal_pre_transition_instruction` has been appended with the verbal instruction of the next maneuver. */
    @Json(name = "verbal_multi_cue")
    val verbalMultiCue: kotlin.Boolean? = false,

    /* Describes a bike share action when using bikeshare routing. */
    @Json(name = "bss_maneuver_type")
    val bssManeuverType: RouteManeuver.BssManeuverType? = null

) {

    /**
     * The type of travel over the maneuver. This can be thought of as a specialization of the travel mode. For example, vehicular travel may be via car, motorcycle, etc.; and travel via bicycle may be via a road bike, mountain bike, etc.
     *
     * Values: car,motorcycle,bus,tractorTrailer,motorScooter,golfCart,foot,wheelchair,segway,road,cross,hybrid,mountain,tram,metro,rail,ferry,cableCar,gondola,funicular
     */
    @JsonClass(generateAdapter = false)
    enum class TravelType(val value: kotlin.String) {
        @Json(name = "car") car("car"),
        @Json(name = "motorcycle") motorcycle("motorcycle"),
        @Json(name = "bus") bus("bus"),
        @Json(name = "tractor_trailer") tractorTrailer("tractor_trailer"),
        @Json(name = "motor_scooter") motorScooter("motor_scooter"),
        @Json(name = "golf_cart") golfCart("golf_cart"),
        @Json(name = "foot") foot("foot"),
        @Json(name = "wheelchair") wheelchair("wheelchair"),
        @Json(name = "segway") segway("segway"),
        @Json(name = "road") road("road"),
        @Json(name = "cross") cross("cross"),
        @Json(name = "hybrid") hybrid("hybrid"),
        @Json(name = "mountain") mountain("mountain"),
        @Json(name = "tram") tram("tram"),
        @Json(name = "metro") metro("metro"),
        @Json(name = "rail") rail("rail"),
        @Json(name = "ferry") ferry("ferry"),
        @Json(name = "cable_car") cableCar("cable_car"),
        @Json(name = "gondola") gondola("gondola"),
        @Json(name = "funicular") funicular("funicular");
    }
    /**
     * Describes a bike share action when using bikeshare routing.
     *
     * Values: noneAction,rentBikeAtBikeShare,returnBikeAtBikeShare
     */
    @JsonClass(generateAdapter = false)
    enum class BssManeuverType(val value: kotlin.String) {
        @Json(name = "NoneAction") noneAction("NoneAction"),
        @Json(name = "RentBikeAtBikeShare") rentBikeAtBikeShare("RentBikeAtBikeShare"),
        @Json(name = "ReturnBikeAtBikeShare") returnBikeAtBikeShare("ReturnBikeAtBikeShare");
    }
}

